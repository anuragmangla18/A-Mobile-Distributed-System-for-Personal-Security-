
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ANURAG
 */
   //public List<vehicle> list1 = new LinkedList<vehicle>();

public class Parking extends javax.swing.JFrame {

   public List<vehicle> list1 = new LinkedList<vehicle>();
   public  List<vehicle> list2 = new LinkedList<vehicle>();
    int carNum1;
    int Num2;

    /**
     * Creates new form Parking
     */
    public Parking() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Parking");

        jRadioButton1.setText("Enter Garage");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("Exit from garage");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setText("Display Car LIst");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addComponent(jRadioButton1)
                .addGap(28, 28, 28)
                .addComponent(jRadioButton2)
                .addGap(33, 33, 33)
                .addComponent(jRadioButton3)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        if (list1.size() <= 9) {
            int numOfCars = 0;
            vehicle vehicleID = null;

            for (int h = 0; h < list1.size(); h++) {
                vehicleID = list1.get(h);
                numOfCars = vehicleID.no;
               // JOptionPane.showMessageDialog(null, "Car numbers in the Car Park now " + numOfCars + "\n" + "Car Park has another : " + (10 - numOfCars) + " vacansies");
                System.out.println("Car numbers in the Car Park now " + numOfCars);

            }
            System.out.println("");
            System.out.println("Car Park has another : " + (10 - numOfCars) + " vacansies");

            System.out.println("\t" + "...Please come next car...");

            System.out.println("");
            System.out.println("Car number " + (list1.size() + 1) + " is the next to enter garage");
            System.out.println("Enter the car number given above ");
            String anurag;
            //String msg = "<html>this is a really";
             StringBuilder output = new StringBuilder(" "+"Car Park has another : " + (10 - numOfCars) + " vacansies"+"\n"+"\n"+"\t" + "...Please come next car..."+"\n"+"\n"+"\t"+"Car number " + (list1.size() + 1) + " is the next to enter garage");
             JOptionPane.showMessageDialog(null, output);
            anurag = JOptionPane.showInputDialog("Enter the car number given above ");
            carNum1 = Integer.parseInt(anurag);
            if ((list1.size() + 1) == carNum1) {
                            System.out.println("anurag");
                             System.out.println(carNum1);
try{
    vehicle qwe=new vehicle(carNum1);
    System.out.println(qwe.no);
                            list1.add(qwe);
                                            System.out.println("anurag");
                                            System.out.println(list1.size());
}
catch(Exception e)
{
  System.out.print(e);
}

            } 
            else {
                System.out.println("Please enter correct car number ");
                JOptionPane.showMessageDialog(null, "Please enter correct car number");
            }
        } 
        else {
            System.out.println("");
            System.out.println("Sorry!!!!");
            System.out.println("No parking space available.Please wait until a vacancy comes");
            int dialogResult = JOptionPane.showConfirmDialog (null, "Would you like to enter waiting list???");
if(dialogResult == JOptionPane.YES_OPTION){
  // Saving code here
    System.out.println("Car number " + (list2.size() + 11) + " is the next to enter garage");
    System.out.print("Enter the car number given above ");
    StringBuilder output = new StringBuilder("Car number " + (list2.size() + 11) + " is the next to enter garage");
             JOptionPane.showMessageDialog(null, output);
             
    int waitingCarNum;
    String anurag = JOptionPane.showInputDialog("Enter the car number given above ");
            waitingCarNum = Integer.parseInt(anurag);
    //waitingCarNum = in.nextInt();

    if ((list2.size() + 11) == waitingCarNum) {
        for (int i = 0; i < list2.size() - 1; i++) {
            vehicle temp = list2.get(i);
            System.out.println(temp.no);
            JOptionPane.showMessageDialog(null, temp.no);
        }
      StringBuilder output1 = new StringBuilder("Waiting List ");
          
        list2.add(new vehicle(waitingCarNum));
        System.out.println("Waiting List ");
        for (int h = 0; h < list2.size() - 1; h++) {
            System.out.print(list2.get(h).no + " ");
            output1.append(list2.get(h).no + " ");
        }
           JOptionPane.showMessageDialog(null, output);
        System.out.println("");

    } else {
        System.out.println("Please enter correct car number ");
        JOptionPane.showMessageDialog(null, "Please enter correct car number");
                                   }
}
else
{
   JOptionPane.showMessageDialog(null, "Thank you"); 
}

        }
                               JOptionPane.showMessageDialog(null, "Thank you for visiting");
 // System.out.println();
jRadioButton1.setSelected(false);

       // this.dispose();
       // Parking asd = new Parking();
       // asd.setVisible(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        vehicle carID1 = null;
        int carList1 = 0;
StringBuilder output=new StringBuilder("Park now "+"\n");
        for (int h = 0; h < list1.size(); h++) {
            carID1 = list1.get(h);
            carList1 = carID1.no;
            System.out.println("Park now " + carList1);
            output.append(carList1+"\n");
        }
                    JOptionPane.showMessageDialog(null,output);

        jRadioButton3.setSelected(false);

    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
         int dialogResult = JOptionPane.showConfirmDialog (null, "Do you want to Depart From waiting list???");
if(dialogResult == JOptionPane.YES_OPTION){
// JOptionPane.showMessageDialog(null, "Depart From Waiting List");
if (list2.size() == 0) {
                                        System.out.println("There is no cars waiting in the list");
                                    } else {
                                        System.out.println("Cars in waiting list" + list2);
                                        System.out.print("Enter your car number");
                                        String anurag = JOptionPane.showInputDialog("Enter the car number ");
           int removeWaitCar = Integer.parseInt(anurag);
                                       // int removeWaitCar = in.nextInt();
                                    }
   
}
else{ 
    if (list1.size() == 0) {
            System.out.println("Garage is empty. If you wish you can Enter your car now");
            //StringBuilder output = new StringBuilder("Car Park has another : " + (10 - numOfCars) + " vacansies"+"\n"+"\n"+"\t" + "...Please come next car..."+"\n"+"\n"+"Car number " + (list1.size() + 1) + " is the next to enter garage");
             JOptionPane.showMessageDialog(null, "Garage is empty. If you wish you can Enter your car now");
        } else {
            System.out.println("Car numbers in the Car park.Choose yours ");
            JOptionPane.showMessageDialog(null, "Car numbers in the Car park.Choose yours ");
            vehicle qsa = null;
            int ssd = 0;
            for (int h = 0; h < list1.size(); h++) {
                qsa = list1.get(h);
                ssd = qsa.no;
                System.out.println("in Park " + ssd);
            }
            System.out.println("Enter the number of your car");
            int RemoveCar = 0;
            String anurag;
            anurag = JOptionPane.showInputDialog("Enter the car number given above ");
            RemoveCar = Integer.parseInt(anurag);
            int sd = 0;

            int which = RemoveCar;
            for (int h = 0; h < list1.size(); h++) {
                vehicle qa = list1.get(h);
                if (qa.no != which) {
                    qa = list1.get(h);
                    continue;
                } else {
                    vehicle kl = null;
                    for (int u = 0; u < list1.size() - 1; u++) {
                        kl = list1.get(u);
                        if (kl.no != which) {
                            //kl.incmoves(2);
                            kl.mvs += 2;
                        } else {
                            break;
                        }
                    }
                    for (int v = list1.size(); (list1.get(h).no != which); v--) {
                        //kl.incmoves(1);
                        kl.mvs += 1;
                    }
                    System.out.println("moves " + list1.get(h).incmoves(1));
                    JOptionPane.showMessageDialog(null, "moves " + list1.get(h).incmoves(1));
                    list1.remove(h);
                    break;
                }

                /*qa=list1.get(h);
											sd=qa.no;
											System.out.println("Park now "+sd);
                 */
            }

            //}
            //catch(Exception e){
            //	System.out.println(e);
            //}
            if (list2.size() > 0) {
System.out.println("So car number "+list2.get(0)+"  to car park:");
JOptionPane.showMessageDialog(null, "So car number "+list2.get(0)+"  to car park:");
                //////////////////////////////						list1.add(list2.getFirst());
		
list1.add(new vehicle(list2.get(0).no));
                list2.remove(0);

                System.out.println("New car list in car park : " + list1);
                System.out.println("");
            } else {
                System.out.println("No cars in waiting list to enter garage");
            }
        }
}
        // Parking asd = new Parking();
        //asd.setVisible(true);
        jRadioButton2.setSelected(false);

    }//GEN-LAST:event_jRadioButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Parking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Parking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Parking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Parking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Parking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    // End of variables declaration//GEN-END:variables
}

class vehicle {

    int no;
    int mvs;

    public vehicle(int abc) {
        no = abc;
        mvs = 0;
    }

    public int incmoves(int x) {
        return (mvs + x);
    }

}
class QuickSort
{
    /* This function takes last element as pivot,
       places the pivot element at its correct
       position in sorted array, and places all
       smaller (smaller than pivot) to left of
       pivot and all greater elements to right
       of pivot */
    int partition(int arr[], int low, int high)
    {
        int pivot = arr[high]; 
        int i = (low-1); // index of smaller element
        for (int j=low; j<high; j++)
        {
            // If current element is smaller than or
            // equal to pivot
            if (arr[j] <= pivot)
            {
                i++;
 
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
 
        // swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
 
        return i+1;
    }
 
 
    /* The main function that implements QuickSort()
      arr[] --> Array to be sorted,
      low  --> Starting index,
      high  --> Ending index */
    void sort(int arr[], int low, int high)
    {
        if (low < high)
        {
            /* pi is partitioning index, arr[pi] is 
              now at right place */
            int pi = partition(arr, low, high);
 
            // Recursively sort elements before
            // partition and after partition
            sort(arr, low, pi-1);
            sort(arr, pi+1, high);
        }
    }
 
    /* A utility function to print array of size n */
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
 
    // Driver program
    public static void main(String args[])
    {
        int arr[] = {10, 7, 8, 9, 1, 5};
        int n = arr.length;
 
        QuickSort ob = new QuickSort();
        ob.sort(arr, 0, n-1);
 
        System.out.println("sorted array");
        printArray(arr);
    }
}
class Graph
{
    private int V;   // No. of vertices
    private LinkedList<Integer> adj[]; //Adjacency Lists
 
    // Constructor
    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];
        for (int i=0; i<v; ++i)
            adj[i] = new LinkedList();
    }
 
    // Function to add an edge into the graph
    void addEdge(int v,int w)
    {
        adj[v].add(w);
    }
 
    // prints BFS traversal from a given source s
    void BFS(int s)
    {
        // Mark all the vertices as not visited(By default
        // set as false)
        boolean visited[] = new boolean[V];
 
        // Create a queue for BFS
        LinkedList<Integer> queue = new LinkedList<Integer>();
 
        // Mark the current node as visited and enqueue it
        visited[s]=true;
        queue.add(s);
 
        while (queue.size() != 0)
        {
            // Dequeue a vertex from queue and print it
            s = queue.poll();
            System.out.print(s+" ");
 
            // Get all adjacent vertices of the dequeued vertex s
            // If a adjacent has not been visited, then mark it
            // visited and enqueue it
            Iterator<Integer> i = adj[s].listIterator();
            while (i.hasNext())
            {
                int n = i.next();
                if (!visited[n])
                {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }
 
    // Driver method to
    public static void main(String args[])
    {
        Graph g = new Graph(4);
 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
 
        System.out.println("Following is Breadth First Traversal "+
                           "(starting from vertex 2)");
 
        g.BFS(2);
    }
}